---
#- name: Statistical TC Regression Tests

#*** Version 0.1.0

#*** Pass variables on the command line to determine the test type:
#
#*** Example nmeta baseline:
#***   ansible-playbook ~/automated_tests/regression-statistical-template.yml --extra-vars "start_nmeta=true start_nmeta2=false duration=10 results_dir=~/results/regression/nmeta-statistical/ policy_name=main_policy_regression_statistical_2.yaml"

#*** Start by ensuring nmeta is not running then start it if required:
- hosts: controllers

  tasks:

    - name: Kill controller ryu processes (nmeta or simple switch etc)
      command: "pkill -f ryu-manager"
      ignore_errors: True

    - name: Copy static regression main config file into place
      command: "cp ~/nmeta/config/tests/regression/{{ policy_name }} ~/nmeta/config/main_policy.yaml"
      when: start_nmeta

    - name: Copy static regression qos config file into place
      command: "cp ~/nmeta/config/tests/regression/qos_policy_regression.yaml ~/nmeta/config/qos_policy.yaml"
      when: start_nmeta

    - name: Copy standard config file into place
      command: "cp ~/nmeta/config/tests/config_standard.yaml ~/nmeta/config/config.yaml"
      when: start_nmeta

    - name: Copy static regression main config file into place
      command: "cp ~/nmeta2/nmeta2/config/tests/regression/{{ policy_name }} ~/nmeta2/nmeta2/config/main_policy.yaml"
      when: start_nmeta2

    - name: Copy standard config file into place
      command: "cp ~/nmeta2/nmeta2/config/tests/config_standard.yaml ~/nmeta2/nmeta2/config/config.yaml"
      when: start_nmeta2

    - name: Set PYTHONPATH environment variable
      shell: "PYTHONPATH=."
      args:
        chdir: ~/ryu

    - name: Run Ryu with nmeta (if required) on controller in the background
      shell: "nohup ~/ryu/bin/ryu-manager ~/nmeta/nmeta.py &"
      args:
        chdir: ~/ryu
      async: 90000
      poll: 0
      when: start_nmeta

    - name: Run Ryu with nmeta2 (if required) on controller in the background
      shell: "nohup ~/ryu/bin/ryu-manager ~/nmeta2/nmeta2/nmeta2.py &"
      args:
        chdir: ~/ryu
      async: 90000
      poll: 0
      when: start_nmeta2

    - name: Check nmeta is running (if required) on controller
      command: "pgrep -f nmeta.py"
      when: start_nmeta

    - name: Check nmeta is running (if required) on controller
      command: "pgrep -f nmeta2.py"
      when: start_nmeta2

    - name: Pause to allow time for switch to connect to controller
      pause: seconds=30
      
#*** Kill any Iperf on the Server and start Iperf server:
- hosts: servers

  tasks:

    - name: Kill any running Iperf processes
      command: "pkill -f iperf"
      ignore_errors: True

    - name: Start Iperf tcp-5555 on Server
      shell: "iperf -s -p 5555 -i 1"
      async: 90000
      poll: 0

    - name: Record input variables to file for the record
      copy: content="regression-static-template.yml was run with start_nmeta={{ start_nmeta }} start_nmeta2={{ start_nmeta2 }} duration={{ duration }} results_dir={{ results_dir}} policy_name={{ policy_name }}" dest=/tmp/regression-static-template.yml.parameters.txt

#*** Data Plane Auxiliary Engine, when doing nmeta2:
- hosts: dpae

  tasks:

    - name: Kill nmeta2dpae processes
      command: "sudo pkill -f nmeta2dpae.py"
      ignore_errors: True
      when: start_nmeta2

    - name: Run nmeta2-dpae (if required) on dpae in the background
      #*** Note the use of redirect of output, otherwise will get broken pipe error:
      shell: "nohup sudo /home/bob/nmeta2dpae/nmeta2dpae/nmeta2dpae.py >/dev/null 2>&1 &"
      async: 90000
      poll: 0
      when: start_nmeta2

    - name: Pause to allow time for DPAE to connect to controller
      pause: seconds=30
      when: start_nmeta2

    - name: Doublecheck that nmeta2dpae.py is running
      command: "pgrep -f nmeta2dpae.py"
      when: start_nmeta2

- hosts: clients

  tasks:

    - name: Kill any running Iperf processes
      command: "pkill -f iperf"
      ignore_errors: True

    - name: Generate global results timestamp variable
      local_action: shell date +%Y%m%d%H%M%S
      register: results_timestamp
      run_once: true

    - debug: msg="Result folder will be {{ results_dir }}{{ results_timestamp.stdout }}"

    - debug: msg="Creating local and remote result folders..."

    - name: Create local results folder
      local_action: shell mkdir {{ results_dir }}{{ results_timestamp.stdout }}
      register: create_local_results_folder
      run_once: true

    - name: Create client results folder
      file: path={{ results_dir }}{{ results_timestamp.stdout }} state=directory

    - name: Run Iperf tcp-5555 test from Client
      shell: "iperf -c sv1 -p 5555 -t {{ duration }} -y c > {{ results_dir }}{{ results_timestamp.stdout }}/{{ inventory_hostname }}-5555-iperf_result.txt"

    - name: Retrieve Iperf results tcp-5555
      fetch: src={{ results_dir }}{{ results_timestamp.stdout }}/{{ inventory_hostname }}-5555-iperf_result.txt dest={{ results_dir }}{{ results_timestamp.stdout }}/ flat=yes

#*** Dump and retrieve the Switch Flow Table for the record:

- hosts: switches

  tasks:

    - name: Create switch results folder
      file: path={{ results_dir }}{{ hostvars[groups['clients'][0]].results_timestamp.stdout }} state=directory

    - name: Dump the Switch Flow Table
      shell: "sudo ovs-ofctl dump-flows br0 -O OpenFlow13 > {{ results_dir }}{{ hostvars[groups['clients'][0]].results_timestamp.stdout }}/{{ inventory_hostname }}-flows.txt"

    - name: Retrieve the Switch Flow Table
      fetch: src={{ results_dir }}{{ hostvars[groups['clients'][0]].results_timestamp.stdout }}/{{ inventory_hostname }}-flows.txt dest={{ results_dir }}{{ hostvars[groups['clients'][0]].results_timestamp.stdout }}/ flat=yes

#*** Retrieve file that holds parameters that test was called with:

- hosts: servers

  tasks:

    - name: Retrieve input variables file
      fetch: src=/tmp/regression-static-template.yml.parameters.txt dest={{ results_dir }}{{ hostvars[groups['clients'][0]].results_timestamp.stdout }}/ flat=yes

#*** Retrieve copy of main policy file that was used:
- hosts: controllers

  tasks:

    - name: Retrieve the main policy file
      fetch: src=~/nmeta/config/main_policy.yaml dest={{ results_dir }}{{ hostvars[groups['clients'][0]].results_timestamp.stdout }}/ flat=yes
      when: start_nmeta

    - name: Retrieve the main policy file
      fetch: src=~/nmeta2/nmeta2/config/main_policy.yaml dest={{ results_dir }}{{ hostvars[groups['clients'][0]].results_timestamp.stdout }}/ flat=yes
      when: start_nmeta2

#*** Finish by stopping any Ryu processes:
- hosts: controllers

  tasks:

    - name: Kill controller ryu processes (nmeta or simple switch etc)
      command: "pkill -f ryu-manager"
      ignore_errors: True
